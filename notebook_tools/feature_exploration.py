"""Functions that facilitate feature exploration."""


def summarize_loan_data(data, include):
    """Generate a dataframe summarizing loan data.

    Args:
        data:  Dataframe containing loan data (either accepted or rejected loans)
        include:  Determines which data types are included in the summary.  This
            argument is passed as the 'include' argument to pandas.describe.  Typical
            values for the current project are np.number, 'string', and 'boolean'.

    Returns:
        Dataframe summarizing the data
    """
    summary = data.describe(include=include).transpose()
    dtypes = data.dtypes.to_frame(name="data type")
    summary = summary.join(dtypes)
    summary["count"] = summary["count"].astype("int")
    return summary


def summarize_acc_loans(data, include, feature_descriptions):
    """Generate a dataframe summarizing data on accepted loans.

    The summary dataframe generated by this function includes a 'description' column,
    which is only available for the data on accepted loans.

    Args:
        data:  Dataframe containing data on accepted loans
        include:  Determines which data types are included in the summary.  This
            argument is passed as the 'include' argument to pandas.describe.  Typical
            values for the current project are np.number, 'string', and 'boolean'.
        feature_descriptions:  Dataframe with a column 'description' that gives a
            description of each feature in the data on accepted loans.  The index of
            this dataframe should match the column names of the 'data' argument.

    Returns:
        Dataframe summarizing the data
    """
    summary = summarize_loan_data(data, include)
    return summary.join(feature_descriptions["description"])


def get_value_counts(ser):
    """Generate a dataframe of value counts for a pandas series.

    This function is a wrapper around pandas.Series.value_counts.  It generates a
    dataframe suitable for display in a Jupyter notebook.

    Args:
        ser:  Series, e.g., a column extracted from a dataframe containing loan data

    Returns:
        Dataframe giving value counts for the series.
    """
    counts = ser.value_counts(dropna=False).to_frame()
    # The index of counts includes pd.NA (used to report the count of NA). This index
    # element shows up as a blank when counts is displayed. To improve the display,
    # convert this index value to the string 'NA'.
    #
    # Rather than modifying the dataframe, a better practice would be to modify the
    # dataframe's display. But the pandas functionality for modifying the display of
    # missing values (e.g., the argument na_rep to Styler.format) works only for cell
    # values and not index values.
    counts.index = counts.index.fillna(value="NA")
    return counts


def style_loan_summary(summary):
    """Customize the HTML display of a dataframe that summarizes loan data.

    Args:
        summary:  Dataframe generated by one of the functions summarize_loan_data,
            summarize_acc_loans defined in the current module

    Returns:
        Customized styler object for the summary dataframe
    """
    styler = _set_styler_defaults(summary.style)
    if "description" in summary.columns:
        styler = styler.set_properties(
            subset="description", **{"text-align": "left", "white-space": "normal"}
        )
    return styler


def style_value_counts(counts):
    """Customize the HTML display of a dataframe presenting value counts for a series.

    Args:
        counts:  Dataframe generated by the function get_value_counts in the current
            module

    Returns:
        Customized styler object for the counts dataframe
    """
    return _set_styler_defaults(counts.style)


def _set_styler_defaults(styler):
    return (
        styler.set_properties(**{"text-align": "center"})
        .map_index(lambda _heading: "text-align: center;", axis="rows")
        .map_index(lambda _heading: "text-align: center;", axis="columns")
        .set_table_styles([{"selector": ".index_name", "props": "text-align: center;"}])
        .format(na_rep="&lt;NA&gt;", precision=1, thousands=",", decimal=".")
    )
